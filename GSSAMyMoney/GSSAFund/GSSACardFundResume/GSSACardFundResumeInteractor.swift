//
//  GSSACardFundResumeInteractor.swift
//  GSSAMyMoney
//
//  Created Usuario Phinder 2021 on 03/08/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import baz_ios_sdk_link_pago
import GSSASessionInfo

class GSSACardFundResumeInteractor: GSSACardFundResumeInteractorProtocol {

    weak var presenter: GSSACardFundResumePresenterProtocol?
    internal var amountPlusComission = 0.0
    
    func enroll(request: LNKPG_EnrollmentRequestFacade) {
        if let _ = GSSAFundSharedVariables.shared.transactionAmountPlusComission {
            amountPlusComission = GSSAFundSharedVariables.shared.transactionAmountPlusComission ?? 0.0
        }else{
            amountPlusComission = ((Double(GSSAFundSharedVariables.shared.amount ?? "0.0") ?? 0.0) + (Double(GSSAFundSharedVariables.shared.transactionComission ?? "0.0") ?? 0.0))
        }
        
        LNKPG_PaymentFacade.shared.displayServiceWithWebPage(merchantID: GSSAFundSharedVariables.shared.ecommerceResponse?.comerciosCybs?.id ?? "", merchantReference: GSSAFundSharedVariables.shared.idTransaccionSuperApp ?? "", amount: String(amountPlusComission) /* GSSAFundSharedVariables.shared.amount ?? ""*/, success: {
            [weak self] response in
            
            guard let self = self else { return }
            
            self.payServices(enrollmentRequest: request)
        }, failure: {
            [weak self] error in
    
            guard let self = self else { return }
            
            self.presenter?.enrollError()
        })
    }
}

//MARK: - private functions
extension GSSACardFundResumeInteractor {
    private func payServices(enrollmentRequest: LNKPG_EnrollmentRequestFacade){
        guard let ecommerceResponse = GSSAFundSharedVariables.shared.ecommerceResponse,
              let accountNumber = GSSAFundSharedVariables.shared.cardInformation?.card?.number else {
            
            self.presenter?.enrollError()
            return
        }
        
        LNKPG_PaymentFacade.shared.requestPayService(cardNumer: accountNumber, ecommerceResponse: ecommerceResponse, success: {
            [weak self] response in
            
            guard let self = self else { return }
            
            self.enrollment(enrollmentRequest: enrollmentRequest)
        }, failure: {
            [weak self] error in
            
            guard let self = self else { return }
            
            self.presenter?.enrollError()
        })
    }
    
    private func enrollment(enrollmentRequest: LNKPG_EnrollmentRequestFacade){
        LNKPG_Facade.shared.postEnrollment(enrollment: enrollmentRequest, success: {
            [weak self] response in
            
            guard let self = self else { return }
            
            guard let response = response else {
                self.presenter?.enrollError()
                return
            }
            
            self.notifyEnrollment(response: response)

        }, failure: {
            [weak self] error in
            
            guard let self = self else { return }
            
            self.presenter?.enrollError()
        })
    }
    
    private func notifyEnrollment(response: LNKPG_EnrollmentResponseFacade){
        //let email: String? = Optional.some("tiwasos367@ppp998.com")
        //guard let appEmail = email?.lowercased(),
        //guard let appEmail: String? = Optional.some("rajale6884@rebation.com"),
        guard let appEmail = GSSISessionInfo.sharedInstance.gsUser.email?.lowercased(),
              let cardInformation = GSSAFundSharedVariables.shared.cardInformation,
              let cvv = GSSAFundSharedVariables.shared.cvv,
              let transactionId = GSSAFundSharedVariables.shared.idTransaccionSuperApp,
              //let clientAccountNumber = cardInformation.card?.number,
              let clientAccountNumber = GSSAFundSharedVariables.shared.clientAccountNumber,
              let afiliationNumber = GSSAFundSharedVariables.shared.numeroAfiliacion/*,
              let amount = GSSAFundSharedVariables.shared.amount*/ else {
            
            presenter?.enrollError()
            return
        }
        let amount = String(amountPlusComission)
        LNKPG_PaymentFacade.shared.notifyEnrollment(enrollment: response, ecommerceResponse: GSSAFundSharedVariables.shared.ecommerceResponse, cardInformation: cardInformation, cvv: cvv, idTransaccionSuperApp: transactionId, numeroCuentaCliente: clientAccountNumber, numeroAfiliacion:  afiliationNumber, correo: GSSAFundSharedVariables.shared.createTokenRequest?.email ?? appEmail, amount: amount, successFondeoAccountResponse: {
            [weak self] accountResponse in
            guard let self = self else { return }
            
            guard let fondeoAccountResponse = accountResponse else {
                self.presenter?.enrollError()
                return
            }
            
            self.presenter?.enrollSuccess(responseEnroll: response, responseOtp: nil, responseCargo: nil, responseFondeo: fondeoAccountResponse)
            
        }, successCargoEcommerceResponse: {
            [weak self] cargoEccomerceResponse in
            guard let self = self else { return }
            
            guard let cargoEccomerceResponse = cargoEccomerceResponse else {
                self.presenter?.enrollError()
                return
            }
       
            self.presenter?.enrollSuccess(responseEnroll: response, responseOtp: nil, responseCargo: cargoEccomerceResponse, responseFondeo: nil)
            
        }, successSessionOTPResponse: {
            [weak self] sessionOtpResponse in
            guard let self = self else { return }
            
            guard let sessionOtpResponse = sessionOtpResponse else {
                self.presenter?.enrollError()
                return
            }
            
            self.presenter?.enrollSuccess(responseEnroll: response, responseOtp: sessionOtpResponse, responseCargo: nil, responseFondeo: nil)
        }, failure: {
            [weak self] error in
            
            guard let self = self else { return }
            
            self.presenter?.enrollError()
        })
    }
}

