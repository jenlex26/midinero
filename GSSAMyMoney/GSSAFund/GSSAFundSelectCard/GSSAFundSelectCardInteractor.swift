//
//  GSSAFundSelectCardInteractor.swift
//  GSSAMyMoney
//
//  Created Desarrollo on 02/08/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import baz_ios_sdk_link_pago
import GSSASessionInfo

class GSSAFundSelectCardInteractor: GSSAFundSelectCardInteractorProtocol {

    weak var presenter: GSSAFundSelectCardPresenterProtocol?
    
    //let email: String? = Optional.some("tiwasos367@ppp998.com")
    
    //MARK: - Properties
    private let afiliationNumber: String? = GSSAFundSharedVariables.shared.numeroAfiliacion
    private let email = GSSISessionInfo.sharedInstance.gsUser.email?.lowercased()
    //private let email = mail
    
    func getCards() {
        guard let email = email,
              let afiliationNumber = afiliationNumber else {
            self.presenter?.getCardsError()
            return
        }
        
        LNKPG_Facade.shared.getListCard(numeroAfiliacion: afiliationNumber, email: email, success: { [weak self] cards in
            guard let self = self else { return }
            
            guard let cards = cards else {
                self.presenter?.getCardsError()
                return
            }
            
            self.presenter?.getCardsSuccess(cards: cards)
            
        }, failure: { [weak self] message in
            guard let self = self else { return }
            
            print("Error message: \(message)")
            self.presenter?.getCardsError()
        })
    }
    
    func deleteCard(body request: LNKPG_TokenCardDeleteRequestFacade) {
        LNKPG_Facade.shared.postDeleteCard(card: request, success:{ [weak self] response in
            guard let self = self else { return }
            
            guard let response = response else {
                self.presenter?.deleteCardError()
                return
            }
            
            self.presenter?.deleteCardSuccess(response: response)
            
        }, failure: { [weak self] error in
            guard let self = self else { return }
            self.presenter?.deleteCardError()
        })
    }
    
    func getEccomerceInformation() {
        //self.requestEcommerceSMMInformation()
        guard let afiliationNumber = afiliationNumber else {
            self.presenter?.getEccomerceInformationError()
            return
        }

        LNKPG_Facade.shared.Initialize(environment: .development)
        LNKPG_Facade.shared.getEcommerceInformation(numeroAfiliacion: afiliationNumber, success: { [weak self] response in
            guard let self = self else { return }

            guard let response = response else {
                self.presenter?.getEccomerceInformationError()
                return
            }

            GSSAFundSharedVariables.shared.ecommerceResponse = response
            self.requestEcommerceSMMInformation()
            //self.getDummyInformation()




        }, failure: {  [weak self] message in
            guard let self = self else { return }

            print("Message Error: \(message ?? "")")
            self.presenter?.getEccomerceInformationError()
        })
    }
    
    
}

//MARK: - Private functions
extension GSSAFundSelectCardInteractor {
    private func requestEcommerceSMMInformation(){
        guard let email = email,
              let afiliationNumber = afiliationNumber else {
            self.presenter?.getEccomerceInformation()
            return 
        }
        
        LNKPG_Facade.shared.getEcommerceSMMInformation(numeroAfiliacion: afiliationNumber, email: email) { [weak self] (information) in
            guard let self = self else { return }

            if let response = information {
                GSSAFundSharedVariables.shared.ecommerceSMMIResponse = response
            }
            guard let _ = information else {
                self.presenter?.getEccomerceInformationError()
                return
            }

            
            self.requestEcommerceSMTInformation()
        } failure: {
            [weak self] message in
            guard let self = self else { return }
            self.presenter?.getEccomerceInformationError()
            
            //self.requestEcommerceSMTInformation()
        }
    }
        
    private func requestEcommerceSMTInformation() {
        guard let email = email,
              let afiliationNumber = afiliationNumber else {
            self.presenter?.getEccomerceInformationError()
            return
        }
    
        LNKPG_Facade.shared.getEcommerceSMTInformation(numeroAfiliacion: afiliationNumber, email: email) { [weak self] (information) in

            guard let self = self else { return }
            
            
            guard let _ = information else {
                self.presenter?.getEccomerceInformationError()
                return
            }
            if let response = information {
                GSSAFundSharedVariables.shared.ecommerceSMTIResponse = response
            }

            let _ = GSSAFundSharedVariables.shared.getIdTransactionSuperApp()

            self.presenter?.getEccomerceInformationSuccess()
        } failure: { [weak self] (error) in
            guard let self = self else { return }
            self.presenter?.getEccomerceInformationError()
            //let _ = GSSAFundSharedVariables.shared.getIdTransactionSuperApp()
            //self.presenter?.getEccomerceInformationSuccess()
        }
    }
    
//    private func getDummyInformation() {
//        GSSAFundSharedVariables.shared.ecommerceSMMIResponse = LNKPG_ESM_MovementsResponseFacade(numeroMovimientosMensuales: 10, movimientos: false)
//
//        GSSAFundSharedVariables.shared.ecommerceSMTIResponse = LNKPG_ESM_TransactionsResponseFacade(limiteDiario: true, limiteMensual: true , numeroTransaccionesDiarias: 10, numeroTransaccionesMensuales: 0)
//
//        GSSAFundSharedVariables.shared.ecommerceResponse?.limiteTarjetasPermitidas = 2
//
//        let _ = GSSAFundSharedVariables.shared.getIdTransactionSuperApp()
//
//
//        self.presenter?.getEccomerceInformationSuccess()
////        var ecommerceSMMIResponse: LNKPG_ESM_MovementsResponseFacade?
////        var ecommerceSMTIResponse: LNKPG_ESM_TransactionsResponseFacade?
//    }
}
