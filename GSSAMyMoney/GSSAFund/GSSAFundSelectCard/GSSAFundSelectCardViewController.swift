//
//  GSSAFundSelectCardViewController.swift
//  GSSAMyMoney
//
//  Created Desarrollo on 02/08/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import GSSAVisualComponents
import baz_ios_sdk_link_pago

class GSSAFundSelectCardViewController: GSSAMasterViewController, GSVCBottomAlertHandler {
    var bottomAlert: GSVCBottomAlert?
    var presenter: GSSAFundSelectCardPresenterProtocol?
    
    @IBOutlet weak var newAddCardButton: UIButton!
    //MARK: - @IBOutlets
    @IBOutlet weak var cardsTable: UITableView!
    @IBOutlet weak var addCardBtn: GSVCButton!
    
    //MARK: - Properties
    private var cards: [LNKPG_ListCardResponseFacade.__Tokens] = []
    private var defaultSelect: Bool = false
    
    var limitCardPermitted: Int = 0
  //  var limitMovementsPerCard: Int = 0
   // var hasMovementPer: Bool = false
    var limitMovementsPerMonth: Int = 0

    var selectCellTask: DispatchWorkItem?
    //MARK: Life cycle methods
    override func viewDidLoad() {
        super.viewDidLoad()
        createTag(eventName: .pageView, section: "mi_dimero", flow: "fondear_cuenta", screenName: "seleccionar_tarjeta", origin: "")
        newAddCardButton.layer.cornerRadius = (newAddCardButton.bounds.height - 4) / 2
        newAddCardButton.backgroundColor = .clear
        newAddCardButton.setTitleColor(.GSVCText100, for: .normal)
        newAddCardButton.titleLabel?.font = UIFont.gsSystemMedium(size: 14)
        newAddCardButton.titleLabel?.textAlignment = .right
        newAddCardButton.layer.borderWidth = 1
        newAddCardButton.layer.borderColor = UIColor.GSVCText100.cgColor
        newAddCardButton.setImage(UIImage(named: "plusSAIcon"), for: UIControl.State.normal)
        
        
        activityObserved()
        setView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        self.navigationController?.navigationBar.tintColor = UIColor.white
        self.navigationController?.setNavigationBarHidden(false, animated: false)
        setProgressLine(value: 0.25, animated: true)
    }
    
    deinit {
        GSSAFundSharedVariables.shared.resetSingleton()
    }
    
    
    @IBAction func newAddCard(_ sender: Any) {
        
       
        guard cards.count < limitCardPermitted   else {
            newAddCardButton.backgroundColor = #colorLiteral(red: 0.6000000238, green: 0.6000000238, blue: 0.6000000238, alpha: 1)
            showBottomAlert(msg: "Límite de tarjetas alcanzado")
            return
        }
        
        activityObserved()
        let view = GSSAFundSetCardNumberRouter.createModule()
        self.presenter?.goToAddNewCard(view)
    }
    
    //MARK: - Actions
    @IBAction func addCard(_ sender: Any) {
        createTag(eventName: .UIInteraction, section: "mi_dinero", flow: "fondear_cuenta", screenName: "seleccionar_tarjeta", type: "click", element: "nueva_tarjeta", origin: "")
    }
}

//MARK: - UITableViewDataSource
extension GSSAFundSelectCardViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return cards.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let identifier = GSSACardTableViewCell.cellIdentifier
        let cell = tableView.dequeueReusableCell(withIdentifier: identifier, for: indexPath) as! GSSACardTableViewCell
        let card = cards[indexPath.row]
        
        let token = card.token ?? ""
        let bankType = GSSAFundSharedVariables.shared.getCardName(cardNumer: card.numeroTarjeta ?? "")
        let accountNumber = card.numeroTarjeta ?? ""
        if card.activo == false{
            cell.cardTypeLabel.textColor = .black.withAlphaComponent(0.5)
            cell.accountLabel.textColor = .black.withAlphaComponent(0.5)
        }else{
            cell.cardTypeLabel.textColor = .black
            cell.accountLabel.textColor = .black
        }
        
        cell.setupData(card: card, bankType: bankType, accountNumber: accountNumber)
        {
            [weak self] card in
            
            guard let self = self else { return }
            
            guard let tokenActive = card.activo,
                  tokenActive else {
                self.showBottomAlert(msg: "Alta procesada, su tarjeta estará activa en 24 horas")
                return
            }
            
            guard let token = card.token else {
                self.showError()
                return
            }
            
            self.presenter?.goToValidateCVV(GSSAFundSetCVVRouter.createModule(token: token))
        } onDelete:
        {
            [weak self] card in
            
            guard let self = self else { return }
            guard let token = card.token else {
                self.showError()
                return
            }
            
            self.showAlert(token: token)
        }
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) {
        activityObserved()
    }
}

//MARK: - GSSAFundSelectCardViewProtocol
extension GSSAFundSelectCardViewController: GSSAFundSelectCardViewProtocol {
    func getEccomerceSMMInformationSuccess() {
        
        limitCardPermitted = GSSAFundSharedVariables.shared.ecommerceResponse?.limiteTarjetasPermitidas ?? 0
        limitMovementsPerMonth = GSSAFundSharedVariables.shared.ecommerceSMMIResponse?.numeroMovimientosMensuales ?? 0
         
        defaultSelect = true
        
        presenter?.getCards()
    }
    
    func getEccomerceInformationError() {
        showError()
    }
    
    func deleteCardSuccess(response: LNKPG_TokenCardDeleteResponseFacade) {
        defaultSelect = false
        presenter?.getCards()
    }
    
    func deleteCardError() {
        showError()
    }
    
    func getCardsSuccess(cards: [LNKPG_ListCardResponseFacade.__Tokens]) {

        GSSAFundSharedVariables.shared.cardCount = cards.count
        newAddCardButton.setTitle("Agregar tarjeta", for: UIControl.State.normal)
        
        
        if  cards.count < limitCardPermitted {
            newAddCardButton.backgroundColor = .clear
        }else {
            newAddCardButton.backgroundColor = #colorLiteral(red: 0.6000000238, green: 0.6000000238, blue: 0.6000000238, alpha: 1)
        }
        
        
        self.cards = cards
        self.cardsTable.reloadData()
        cardsTable.tableViewDidFinishReloadData{ [self] in
            
            GSVCLoader.hide()
            if cardsTable.numberOfRows(inSection: 0) > 0 && defaultSelect {
                selectCellTask?.perform()
            }
        }
    }
    
    func getCardsError() {
        showError()
    }
}
//MARK: - Private functions
extension GSSAFundSelectCardViewController {
    private func setView() {
        self.title = "Recarga tu tarjeta"
        
        cardsTable.dataSource = self
        
        cardsTable.rowHeight = 80
        cardsTable.separatorStyle = .none
        cardsTable.register(GSSACardTableViewCell.nib, forCellReuseIdentifier: GSSACardTableViewCell.cellIdentifier)
        
        GSVCLoader.show()
        presenter?.getEccomerceInformation()
        
    }
    
    private func showAlert(token: String) {
        activityObserved()
        let alert = UIAlertController(title: "Eliminar tarjeta",
                                      message: "¿Estás seguro que deseas eliminar tarjeta seleccionada?",
                                      preferredStyle: .alert)
        
        alert.addAction(UIAlertAction(title: "Aceptar", style: .default) { [weak self] _ in
            guard let self = self else { return }
            GSVCLoader.show()
            
            let merchantID = GSSAFundSharedVariables.shared.ecommerceResponse?.comerciosCybs?.id ?? ""
            let merchantReference = GSSAFundSharedVariables.shared.getIdTransactionSuperApp()
            self.presenter?.deleteCard(body: LNKPG_TokenCardDeleteRequestFacade(merchantID: merchantID,
                                                                                merchantReference: merchantReference,
                                                                                paySubscriptionId: token))
        })
        
        alert.addAction(UIAlertAction(title: "Cancelar", style: .cancel, handler: nil))
        presenter?.showAlert(alert)
    }
    
    private func showError(msg: String = "Ocurrio un error intentelo más tarde", subtitle: String? = nil, isDouble: Bool? = true) {
        activityObserved()
        
        GSVCLoader.hide()
        
        let view = getErrorMPViewController(subtitle: subtitle, message: msg, isDouble: isDouble)
        self.presenter?.showError(view)
    }
    
    private func showBottomAlert(msg: String) {
        self.presentBottomAlertFullData(status: .caution, message: msg, attributedString: nil, canBeClosed: true, animated: true, showOptionalButton: false, optionalButtonText: nil)
    }
}
