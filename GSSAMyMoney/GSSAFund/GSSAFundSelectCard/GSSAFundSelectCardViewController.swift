//
//  GSSAFundSelectCardViewController.swift
//  GSSAMyMoney
//
//  Created Desarrollo on 02/08/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import GSSAVisualComponents
import baz_ios_sdk_link_pago
import GSSAFunctionalUtilities

class GSSAFundSelectCardViewController: GSSAMasterViewController {
    
    var presenter: GSSAFundSelectCardPresenterProtocol?
    
    //MARK: - @IBOutlets
    @IBOutlet weak var cardsTable: UITableView!
    
    //MARK: - Properties
    var cards: [LNKPG_ListCardResponseFacade.__Tokens] = []
    var selectCellTask: DispatchWorkItem?
    //MARK: Life cycle methods
    override func viewDidLoad() {
        super.viewDidLoad()
        activityObserved()
        setView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        self.navigationController?.navigationBar.tintColor = UIColor.white
        self.navigationController?.setNavigationBarHidden(false, animated: false)
        setProgressLine(value: 0.25, animated: true)
    }
    
    //MARK: - Methods
    private func setView() {
        self.title = "Recarga tu tarjeta"
        cardsTable.dataSource = self
        cardsTable.rowHeight = 80
        cardsTable.separatorStyle = .none
        cardsTable.register(GSSACardTableViewCell.nib, forCellReuseIdentifier: GSSACardTableViewCell.cellIdentifier)
        
        GSVCLoader.show()
        presenter?.getEccomerceInformation()
    }
    
    private func showAlert(token: String) {
        activityObserved()
        let alert = UIAlertController(title: "Eliminar tarjeta",
                                      message: "¿Estás seguro que quieres eliminar la tarjeta guardada?",
                                      preferredStyle: .alert)
        
        alert.addAction(UIAlertAction(title: "Aceptar", style: .default) { [weak self] _ in
            guard let self = self else { return }
            GSVCLoader.show()
            
            let merchantID = GSSAFundSharedVariables.shared.ecommerceResponse?.comerciosCybs?.id ?? ""
            let merchantReference = GSSAFundSharedVariables.shared.getIdTransactionSuperApp()
            self.presenter?.deleteCard(body: LNKPG_TokenCardDeleteRequestFacade(merchantID: merchantID,
                                                                                merchantReference: merchantReference,
                                                                                paySubscriptionId: token))
        })
        
        alert.addAction(UIAlertAction(title: "Cancelar", style: .cancel, handler: nil))
        presenter?.showAlert(alert)
    }
    
    private func showError() {
        activityObserved()
        GSVCLoader.hide()
        let message = "Ocurrio un error intentelo más tarde"
        let view = getErrorMPViewController(message: message)
        self.presenter?.showError(view)
    }
    
    //MARK: - Actions
    @IBAction func addCard(_ sender: Any) {
        activityObserved()
        let view = GSSAFundSetCardNumberRouter.createModule()
        self.presenter?.goToAddNewCard(view)
    }
}

//MARK: - UITableViewDataSource
extension GSSAFundSelectCardViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return cards.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let identifier = GSSACardTableViewCell.cellIdentifier
        let cell = tableView.dequeueReusableCell(withIdentifier: identifier, for: indexPath) as! GSSACardTableViewCell
        let card = cards[indexPath.row]
        let token = card.token ?? ""
        let bankType = GSSAFundSharedVariables.shared.getCardName(cardNumer: card.numeroTarjeta ?? "")
        let accountNumber = card.numeroTarjeta ?? ""
        
        if indexPath.row == 0{
            selectCellTask = DispatchWorkItem(block: { [self] in
                if GLOBAL_ENVIROMENT == .develop{
                  presenter?.goToValidateCVV(GSSAFundSetCVVRouter.createModule(token: token))
                }
                GSVCLoader.hide()
            })
        }
        
        cell.setupData(token: token, bankType: bankType, accountNumber: accountNumber,
                       onSelect: { [weak self] token in
                        guard let self = self else { return }
                        self.presenter?.goToValidateCVV(GSSAFundSetCVVRouter.createModule(token: token))
                       },
                       
                       onDelete: { [weak self] token in
                        guard let self = self else { return }
                        self.showAlert(token: token)
                       })
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) {
        activityObserved()
    }
}

//MARK: - GSSAFundSelectCardViewProtocol
extension GSSAFundSelectCardViewController: GSSAFundSelectCardViewProtocol {
    func getEccomerceInformationSuccess(response: LNKPG_EcommerceResponseFacade) {
        presenter?.getCards()
    }
    
    func getEccomerceInformationError() {
        showError()
    }
    
    func deleteCardSuccess(response: LNKPG_TokenCardDeleteResponseFacade) {
        presenter?.getCards()
    }
    
    func deleteCardError() {
        showError()
    }
    
    func getCardsSuccess(cards: [LNKPG_ListCardResponseFacade.__Tokens]) {
        self.cards = cards
        self.cardsTable.reloadData()
        cardsTable.tableViewDidFinishReloadData{ [self] in
            DispatchQueue.main.asyncAfter(deadline: .now() + 2.5, execute: {
                GSVCLoader.hide()
                if cardsTable.numberOfRows(inSection: 0) > 0{
                    selectCellTask?.perform()
                }
            })
        }
    }
    
    func getCardsError() {
        showError()
    }
}
