//
//  GSSALinkDePagoViewController.swift
//  GSSAMyMoney
//
//  Created Desarrollo on 12/07/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import GSSAVisualTemplates
import GSSAVisualComponents
import GSSASessionInfo
import GSSAFunctionalUtilities
import baz_ios_sdk_link_pago

class GSSALinkDePagoViewController: UIViewController, GSSALinkDePagoViewProtocol, GSVCBottomAlertHandler {
    var bottomAlert: GSVCBottomAlert?
    var presenter: GSSALinkDePagoPresenterProtocol?
    
    @IBOutlet weak var txtMail: GSVCTextField!
    @IBOutlet weak var txtAmount: GSVCTextField!
    @IBOutlet weak var lblMail: GSVCLabel!
    @IBOutlet weak var navBar: UIView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.GSVCPrincipal100
        self.navBar.backgroundColor = UIColor.GSVCPrincipal100
        txtMail.delegate = self
        txtMail.returnKeyType = .done
        txtAmount.returnKeyType = .next
        txtAmount.delegate = self
        
        if GSSISessionInfo.sharedInstance.gsUser.email != nil && GSSISessionInfo.sharedInstance.gsUser.email?.count ?? 0 > 0{
            lblMail.isHidden = true
            txtMail.isHidden = true
        }else{
            lblMail.isHidden = false
            txtMail.isHidden = false
        }
    }
    
    override func viewDidAppear(_ animated: Bool) {
        txtAmount.becomeFirstResponder()
    }
    
    func optionalAction() {
        print("Ok")
    }
    
    func isValidAmount() -> Bool{
        if txtAmount.text?.haveData() == true{
            let quantity = Int(txtAmount.text?.showOnlyNumbers ?? "0") ?? 0
            if quantity > 0{
                return true
            }else{
                return false
            }
        }else{
            return false
        }
    }
    
    func showFondeo(){
        let quantity = txtAmount.text?.moneyToDoubleString()
        var mail = GSSISessionInfo.sharedInstance.gsUser.email
        if mail?.haveData() == false || mail == nil{
            mail = txtMail.text
        }
        let accountNumber = GSSISessionInfo.sharedInstance.gsUser.mainAccount?.encryptAlnova()
        
        let view = BASAAdquiriente.createModule(withInfo: [
            "amount": "\(quantity ?? "0.0")",
            "numeroCuentaCliente": "\(accountNumber ?? "")",
            "merchantDetail":"Abono Saldo", "correo": "\(mail ?? "")",
                                                            "numeroAfiliacion": "8632464"
                ])
        self.navigationController?.pushViewController(view, animated: true)
    }
    
    @IBAction func close(sender: GSVCButton){
        self.navigationController?.popViewController(animated: true)
    }
    
    @IBAction func next(sender: GSVCButton){
        if txtMail.isHidden == false && txtMail.text?.haveData() == true && txtMail.text?.isValidEmail ==  true{
            if isValidAmount() == true{
                GSVCLoader.show()
                presenter?.requestMailUpdate(body: UpdateMailBody.init(correoElectronico: txtMail.text?.encryptAlnova()), Response: { Response in
                    GSVCLoader.hide()
                    if Response != nil{
                        self.showFondeo()
                    }else{
                        self.presentBottomAlertFullData(status: .error, message: "En este momento no podemos actualizar su correo, intente más tarde", attributedString: nil, canBeClosed: true, animated: true, showOptionalButton: false, optionalButtonText: nil)
                    }
                })
            }else{
                self.presentBottomAlertFullData(status: .error, message: "Ingrese una cantidad válida", attributedString: nil, canBeClosed: true, animated: true, showOptionalButton: false, optionalButtonText: nil)
            }
        }else if isValidAmount() == true && txtMail.isHidden == true{
            showFondeo()
        }else{
            self.presentBottomAlertFullData(status: .error, message: "Ingrese un correo electrónico válido", attributedString: nil, canBeClosed: true, animated: true, showOptionalButton: false, optionalButtonText: nil)
        }
    }
}

extension GSSALinkDePagoViewController: UITextFieldDelegate{
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField == txtMail{
            self.view.endEditing(true)
        }
        if textField == txtAmount{
            if txtMail.isHidden == true{
                self.view.endEditing(true)
            }else{
                textField.resignFirstResponder()
                txtMail.becomeFirstResponder()
            }
        }
        return true
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        if textField == txtAmount{
            let hasLittleCoin = false
            
            if string.count == 0, txtAmount.text?.dValue ?? 0 < 0.1 {
                
                textField.resetAmount(withLittleCoin: hasLittleCoin)
            } else {
                let bHideCents = GSSISessionInfo.sharedInstance.bHideCents
                textField.addText(newText: string,
                                  withMaxFontSize: 80,
                                  withLittleCoin: hasLittleCoin, withFontWeight: .bold,
                                  withNoDecimals: bHideCents)
            }
            return false
        }else{
            return true
        }
    }
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        if textField == txtMail{
            UIView.animate(withDuration: 0.3, animations: { () -> Void in
                self.view.frame.origin.y -= 100.0
            })
        }
    }
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        if textField == txtMail{
            UIView.animate(withDuration: 0.3, animations: { () -> Void in
                self.view.frame.origin.y = 0.0
            })
        }
        if textField == txtAmount{
            if txtMail.isHidden == false{
                txtMail.becomeFirstResponder()
            }else{
                self.view.endEditing(true)
            }
        }
    }
}
