//
//  GSSARequestDebitCardViewController.swift
//  GSSAMyMoney
//
//  Created Desarrollo on 28/07/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import GSSAVisualComponents
import GSSAVisualTemplates
import GSSASessionInfo
import GSSAInterceptor
import GSSAPermissionsManager

class GSSARequestDebitCardViewController: GSSAMasterViewController, GSSARequestDebitCardViewProtocol, GSINNavigateDelegate, GSVCBottomAlertHandler {
    
    @IBOutlet weak var headerView               : UIView!
    @IBOutlet weak var containerView            : UIView!
    @IBOutlet weak var gradientView             : Gradient!
    @IBOutlet weak var lblAddress               : UILabel!
    @IBOutlet weak var lblShippingCost          : GSVCLabel!
    @IBOutlet weak var lblShippingCostSubtitle  : GSVCLabel!
    @IBOutlet weak var btnNext                  : GSVCButton!
    
    var bottomAlert: GSVCBottomAlert?
    var presenter: GSSARequestDebitCardPresenterProtocol?
    var isViewDidLoad = false
    var amount = ""
    
    override func viewDidLoad() {
        super.viewDidLoad()
        headerView.backgroundColor = UIColor.GSVCBase300()
        containerView.layer.cornerRadius = 10.0
        gradientView.layer.cornerRadius = 10.0
        setAddress()
        getShippingAmount()
        isViewDidLoad = true
        NotificationCenter.default.addObserver(self, selector: #selector(retryRequest), name: NSNotification.Name(rawValue: "RetryRequest"), object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(closeView), name: NSNotification.Name(rawValue: "ExitFlow"), object: nil)
    }
    
    override func viewDidAppear(_ animated: Bool) {
        if isViewDidLoad == true{
            isViewDidLoad = false
        }else{
            let address = requestedAddress.shared
            lblAddress.text = "\((address.street ?? "").capitalized) \((address.externalNumber ?? "").capitalized) \((address.suburb ?? "").capitalized) \((address.city ?? "").capitalized) \(address.postalCode ?? "")"
        }
    }
    
    @objc func retryRequest(){
        getShippingAmount()
    }
    
    @objc func closeView(){
        self.navigationController?.popViewController(animated: true)
    }
    
    func getShippingAmount(){
        GSVCLoader.show()
        let transaction = PhysicalCardShippingAmountTransaction.init(transaccion: PhysicalCardShippingAmountBody.init(numeroTarjeta: GSSISessionInfo.sharedInstance.gsUser.card?.encryptAlnova(), primerTokenVerificacion: customToken.shared.firstVerification, geolocalizacion: ShippingAmountLocation.init(latitud: (GSPMLocationManager.shared.lastLocation?.coordinate.latitude.description.encryptAlnova() ?? "0.0".encryptAlnova()), longitud: (GSPMLocationManager.shared.lastLocation?.coordinate.longitude.description.encryptAlnova() ?? "0.0".encryptAlnova()))))
        
        presenter?.requestGetShippingCost(body: transaction, Response: { [self] Response in
            if Response != nil{
                amount = Response?.resultado?.montoTotal?.alnovaDecrypt().moneyFormatWithoutSplit() ?? ""
                    lblShippingCost.text = "Solicítala con un costo de \(Response?.resultado?.montoTotal?.alnovaDecrypt().moneyFormatWithoutSplit() ?? "")"
                    self.lblShippingCostSubtitle.text = "Solicítala con un costo de \(Response?.resultado?.montoTotal?.alnovaDecrypt().moneyFormatWithoutSplit() ?? "")"
                 GSVCLoader.hide()
            }else{
                GSVCLoader.hide()
               let view = showErrorViewController(message: "Ocurrió un error")
               self.present(view, animated: true, completion: nil)
            }
        })
    }
    
    func optionalAction() {}
    
    func setAddress(){
        let address = GSSISessionInfo.sharedInstance.gsUser.address
        lblAddress.text = "\((address?.street ?? "").capitalized) \((address?.externalNumber ?? "").capitalized) \((address?.neighborhood ?? "").capitalized) \((address?.city ?? "").capitalized) \(address?.zipCode ?? "")"
        requestedAddress.shared.street = address?.street
        requestedAddress.shared.externalNumber = address?.externalNumber
        requestedAddress.shared.suburb = address?.neighborhood
        requestedAddress.shared.city = address?.city
        requestedAddress.shared.postalCode = address?.zipCode
    }
    
    func didFailToEnterFlow(error: NSError) {
        print("Error...")
    }
    
    func willFinishFlow(withInfo info: [String : Any]?) {
       
    }
    
    @IBAction func next(_ sender: Any){
        self.present(GSSACardPaymentBtnCoreViewRouter.createModule(), animated: true)
    }
    
    @IBAction func editAddress(_ sender: Any){
        let view = GSSAPhysicalCardRequestAddressRouter.createModule()
        self.navigationController?.pushViewController(view, animated: true)
    }
    
    @IBAction func close(_ sender: Any){
        self.navigationController?.popViewController(animated: true)
    }
}

extension GSSARequestDebitCardViewController : GSVTTicketOperationDelegate{
    func operationSuccessActionClosed() {
        self.navigationController?.popToRootViewController(animated: true)
    }
}
