//
//  GSSARequestDebitCardViewController.swift
//  GSSAMyMoney
//
//  Created Desarrollo on 28/07/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import GSSAVisualComponents
import GSSAVisualTemplates
import GSSASessionInfo
import GSSAInterceptor


class GSSARequestDebitCardViewController: GSSAMasterViewController, GSSARequestDebitCardViewProtocol, GSINNavigateDelegate, GSVCBottomAlertHandler, BASAScanCodeWireframeProtocol {
    func codeDetectedRouter(sCode: String) {
        let view = GSSASetCVVRouter.createModule()
        self.navigationController?.pushViewController(view, animated: true)
    }
    
    func cancelCodeScanner() {
        
    }
 
    
    
    @IBOutlet weak var headerView               : UIView!
    @IBOutlet weak var containerView            : UIView!
    @IBOutlet weak var gradientView             : Gradient!
    @IBOutlet weak var lblAddress               : UILabel!
    @IBOutlet weak var lblShippingCost          : GSVCLabel!
    @IBOutlet weak var lblShippingCostSubtitle  : GSVCLabel!
    @IBOutlet weak var btnNext                  : GSVCButton!
    
    var bottomAlert: GSVCBottomAlert?
    var presenter: GSSARequestDebitCardPresenterProtocol?
    var isViewDidLoad = false
    var amount = ""
    
    override func viewDidLoad() {
        super.viewDidLoad()
        headerView.backgroundColor = UIColor.GSVCBase300()
        containerView.layer.cornerRadius = 10.0
        gradientView.layer.cornerRadius = 10.0
        setAddress()
        getShippingAmount()
        isViewDidLoad = true
        NotificationCenter.default.addObserver(self, selector: #selector(parseCustomRequest(notification:)), name: NSNotification.Name(rawValue: "PhysicalCardShippingAmountResponse"), object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(retryRequest), name: NSNotification.Name(rawValue: "RetryRequest"), object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(closeView), name: NSNotification.Name(rawValue: "ExitFlow"), object: nil)
    }
    
    override func viewDidAppear(_ animated: Bool) {
        if isViewDidLoad == true{
            isViewDidLoad = false
        }else{
            let address = requestedAddress.shared
            lblAddress.text = "\((address.street ?? "").capitalized) \((address.externalNumber ?? "").capitalized) \((address.suburb ?? "").capitalized) \((address.city ?? "").capitalized) \(address.postalCode ?? "")"
        }
    }
    
    @objc func retryRequest(){
        getShippingAmount()
    }
    
    @objc func closeView(){
        self.navigationController?.popViewController(animated: true)
    }
    
    @objc func parseCustomRequest(notification: Notification){
        DispatchQueue.main.async {
            GSVCLoader.hide()
            print("USANDO CUSTOM REQUEST...")
            let data = notification.object as! Data
            let model = try! JSONDecoder().decode(PhysicalCardShippingAmountResponse.self, from: data)
            debugPrint(model)
            if model.resultado?.monto == nil{
                self.btnNext.isEnabled = false
                let view = self.showErrorViewController(message: "Intente más tarde")
                view.modalPresentationStyle = .fullScreen
                self.present(view, animated: true, completion: nil)
            }else{
                self.amount = model.resultado?.monto ?? ""
                self.lblShippingCost.text = "Solicítala con un costo de \(model.resultado?.monto?.moneyFormatWithoutSplit() ?? "")"
                self.lblShippingCostSubtitle.text = "Solicítala con un costo de \(model.resultado?.monto?.moneyFormatWithoutSplit() ?? "")"
            }
        }
    }
    
    func getShippingAmount(){
        GSVCLoader.show()
        presenter?.requestGetShippingCost(Response: { [self] Response in
            if Response != nil{
                GSVCLoader.hide()
                amount = Response?.resultado?.monto ?? ""
                lblShippingCost.text = "Solicítala con un costo de \(Response?.resultado?.monto?.moneyFormatWithoutSplit() ?? "")"
                self.lblShippingCostSubtitle.text = "Solicítala con un costo de \(Response?.resultado?.monto?.moneyFormatWithoutSplit() ?? "")"
            }
        })
    }
    
    func optionalAction() {}
    
    func setAddress(){
        let address = GSSISessionInfo.sharedInstance.gsUser.address
        lblAddress.text = "\((address?.street ?? "").capitalized) \((address?.externalNumber ?? "").capitalized) \((address?.neighborhood ?? "").capitalized) \((address?.city ?? "").capitalized) \(address?.zipCode ?? "")"
    }
    
    func didFailToEnterFlow(error: NSError) {
        print("Error...")
    }
    
    func willFinishFlow(withInfo info: [String : Any]?) {
        let generatedTicket = GSSARequestDebitCardGenericTicket.getGenericTicket(delegate: self)
        self.navigationController?.pushViewController(generatedTicket, animated: true)
    }
    
    @IBAction func next(_ sender: Any){
        let parameters:[String:Any] =
            [
                "paymentConfig":
                    [
                        "productQuantity":"1",
                        "commission":"0",
                        "concept":"Donación",
                        "idCompany":"",
                        "idReferencePay":"",
                        "iva":"0",
                        "amount":"\(amount)",
                        "requieredBill" : true,
                        "shippingAmount": "\(amount)",
                        "x-idOperacionConciliacion": ""
                    ],
                "viewConfig" :
                    [
                        "txtTitle":"Cualquier persona puede recibir tu tarjeta pero solo tú podrás activarla desde la App.",
                        "txtSubtitle":"Realizado con:",
                        "txtHelper":"\(amount)",
                        "txtSlideButton": "Desliza para pagar",
                    ]
            ]
        
        GSINAdminNavigator.shared.startFlow(forAction: "GSIFTr_PaymentBTN", navigateDelegate: self, withInfo: parameters)
    }
    
    @IBAction func editAddress(_ sender: Any){
        let view = GSSAPhysicalCardRequestAddressRouter.createModule()
        self.navigationController?.pushViewController(view, animated: true)
    }
    
    @IBAction func close(_ sender: Any){
        self.navigationController?.popViewController(animated: true)
    }
}

extension GSSARequestDebitCardViewController : GSVTTicketOperationDelegate
{
    func operationSuccessActionClosed() {
        self.navigationController?.popToRootViewController(animated: true)
    }
    

}
