//
//  GSSAPhysicalCardRequestAddressViewController.swift
//  GSSAMyMoney
//
//  Created Desarrollo on 29/07/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import GSSAVisualTemplates
import GSSAVisualComponents

class GSSAPhysicalCardRequestAddressViewController: UIViewController, GSSAPhysicalCardRequestAddressViewProtocol, GSVCBottomAlertHandler, GSVCPickerControllerDelegate, GSVCPickerControllerDataSource{

    var bottomAlert: GSVCBottomAlert?
    var presenter: GSSAPhysicalCardRequestAddressPresenterProtocol?
    
    @IBOutlet weak var actualLocationView: UIView!
    @IBOutlet weak var btnTxtPostalCode  : UIButton!
    @IBOutlet weak var txtPostalCode     : GSVCTextField!
    @IBOutlet weak var txtColonia        : GSVCTextField!
    @IBOutlet weak var txtStreet         : GSVCTextField!
    @IBOutlet weak var txtExternalNumber : GSVCTextField!
    @IBOutlet weak var txtInternalNumber : GSVCTextField!
    @IBOutlet weak var txtCity           : GSVCLabel!
    @IBOutlet weak var txtState          : GSVCLabel!
    @IBOutlet weak var txtCountry        : GSVCLabel!
    @IBOutlet weak var btnPostalCode     : GSVCButton!
    
    var pickerData: [String:Int] = [:]
    var picker: GSVCPickerController!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        changeFieldsVisibility(hidden: true)
        actualLocationView.backgroundColor = UIColor.GSVCBase300()
        txtPostalCode.delegate = self
        txtPostalCode.tag = 1
        picker = GSVCPickerController(type: .data, textField: txtColonia)
        picker.delegate = self
        picker.dataSource = self
    }
    
    override func viewWillAppear(_ animated: Bool) {
        txtPostalCode.becomeFirstResponder()
    }
    
    func optionalAction() {}
    
    func changeFieldsVisibility(hidden: Bool){
        for item in self.view.subviews[1].subviews[0].subviews{
            if item.tag == 1{
                UIView.animate(withDuration: 0.5,
                               delay: 0.0,
                               usingSpringWithDamping: 0.9,
                               initialSpringVelocity: 1,
                               options: [],
                               animations: {
                                item.isHidden = hidden
                               })
            }
        }
    }
    
    func numberOfComponents(in textField: UITextField) -> Int {
        return 1
    }
    
    func getElements(component: Int, textField: UITextField) -> [DataPicker]? {
        let dataPicker = pickerData.keys.map { element -> DataPicker in
            return DataPicker(element, nil)
        }
        return dataPicker
    }
    
    @IBAction func changePostalCode(_ sender: Any){
        let alert = UIAlertController(title: "Baz", message: "¿Desea actualizar el código postal?", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Aceptar", style: .default, handler: { [self]_ in
            changeFieldsVisibility(hidden: true)
            txtPostalCode.isUserInteractionEnabled = true
            btnPostalCode.isHidden = false
            btnTxtPostalCode.isUserInteractionEnabled = false
        }))
        alert.addAction(UIAlertAction(title: "Cancelar", style: .cancel, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
    
    @IBAction func postalCodeButtonClick(_ sender: Any){
        if txtPostalCode.text?.count == 5{
            GSVCLoader.show()
            presenter?.requestLocationInfo(CP: txtPostalCode.text ?? "", LocationInfo: { [self] LocationInfo in
                GSVCLoader.hide()
                if LocationInfo != nil{
                    pickerData.removeAll()
                    changeFieldsVisibility(hidden: false)
                    btnPostalCode.isHidden = true
                    txtPostalCode.isUserInteractionEnabled = false
                    btnTxtPostalCode.isUserInteractionEnabled = true
                    txtCity.text = LocationInfo?.resultado?.municipio
                    txtState.text = LocationInfo?.resultado?.estado
                    txtCountry.text = LocationInfo?.resultado?.pais
                    for item in LocationInfo!.resultado!.colonias!{
                        pickerData.updateValue(item.id ?? -1, forKey: item.nombre ?? "")
                    }
                }else{
                    self.presentBottomAlertFullData(status: .error, message: "Verifique que el código postal sea válido", attributedString: nil, canBeClosed: true, animated: true, showOptionalButton: false, optionalButtonText: nil)
                }
            })
        }else{
            self.presentBottomAlertFullData(status: .error, message: "Ingrese un código postal válido", attributedString: nil, canBeClosed: true, animated: true, showOptionalButton: false, optionalButtonText: nil)
        }
    }
    
    @IBAction func close(_ sender: Any){
        self.navigationController?.popViewController(animated: true)
    }
}

extension GSSAPhysicalCardRequestAddressViewController: UITextFieldDelegate{
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        let ACCEPTABLE_CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzñÑ0123456789 "
        let currentText = textField.text ?? ""
        guard let stringRange = Range(range, in: currentText) else { return false }
        let updatedText = currentText.replacingCharacters(in: stringRange, with: string)
        
        let cs = NSCharacterSet(charactersIn: ACCEPTABLE_CHARACTERS).inverted
        let filtered = string.components(separatedBy: cs).joined(separator: "")
        
        switch textField.tag{
        case 1:
            return updatedText.count <= 5 && (string == filtered)
        default:
            return true
        }
    }
}
