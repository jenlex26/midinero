//
//  BASANewBeneficiaryViewController.swift
//  GSSAFront
//
//  Created Desarrollo on 14/06/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import GSSAVisualComponents
import GSSAVisualTemplates
import GSSASessionInfo

class BASANewBeneficiaryViewController: UIViewController, BASANewBeneficiaryViewProtocol, GSVTDigitalSignDelegate {
    var presenter: BASANewBeneficiaryPresenterProtocol?
    
    @IBOutlet weak var table: UITableView!
    
    var beneficiaryData: BeneficiaryItem?
    var tableFields: Array<beneficiaryField> = []
    var cellsArray: Array<[UITableViewCell:CGFloat]> = []
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        
        registerCells()
        setTextFields()
        setOptions()
        table.alwaysBounceVertical = false
        table.delegate = self
        table.dataSource = self
        self.hideKeyboardWhenTappedAround()
    }
    
    func registerCells(){
        let bundle = Bundle(for: BASANewBeneficiaryViewController.self)
        table.register(UINib(nibName: "BASASwitchItemCell", bundle: bundle), forCellReuseIdentifier: "BASASwitchItemCell")
        table.register(UINib(nibName: "SectionCell", bundle: bundle), forCellReuseIdentifier: "SectionCell")
        table.register(UINib(nibName: "BASATextFieldCell", bundle: bundle), forCellReuseIdentifier: "BASATextFieldCell")
        table.register(UINib(nibName: "BASAInfoCardCell", bundle: bundle), forCellReuseIdentifier: "BASAInfoCardCell")
        table.register(UINib(nibName: "BASAButtonCell", bundle: bundle), forCellReuseIdentifier: "BASAButtonCell")
    }
    
    func setOptions(){
        NotificationCenter.default.addObserver(self, selector: #selector(updateData(sender:)), name: NSNotification.Name(rawValue: "TextFieldDidEnd"), object: nil)
        
        let headerCell = table.dequeueReusableCell(withIdentifier: "SectionCell") as! SectionCell
        headerCell.lblTitle.styleType = 6
        headerCell.lblTitle.text = "Podrás agregar hasta cuatro beneficiarios."
        cellsArray.append([headerCell:70.0])
        
        let addressSwitchCell = table.dequeueReusableCell(withIdentifier: "BASASwitchItemCell") as! BASASwitchItemCell
        addressSwitchCell.lblSubTitle.isHidden = true
        addressSwitchCell.lblTitle.styleType = 6
        addressSwitchCell.backgroundColor = UIColor.GSVCBase300()
        addressSwitchCell.lblTitle.text = "Utilizar mi dirección"
        addressSwitchCell.tag = 1
        if beneficiaryData?.domicilio != nil{
            addressSwitchCell.swtch.isOn = false
        }else{
            addressSwitchCell.swtch.isOn = true
        }
        
        addressSwitchCell.swtch.addTarget(self, action: #selector(switchChanged(sender:)), for: .valueChanged)
        addressSwitchCell.separatorView.isHidden = true
        cellsArray.append([addressSwitchCell:56.0])
        
        for item in tableFields{
            let cell = table.dequeueReusableCell(withIdentifier: "BASATextFieldCell") as! BASATextFieldCell
            cell.configureCell(data: item)
            cellsArray.append([cell:117.0])
        }
        
        let percentCell = table.dequeueReusableCell(withIdentifier: "BASATextFieldCell") as! BASATextFieldCell
        percentCell.blankSpace.isHidden = false
        percentCell.textField.delegate = self
        percentCell.lblTitle.text = "Porcentaje otorgado"
        percentCell.textField.placeholder = "%"
        percentCell.textField.keyboardType = .numberPad
        
        let prefix = UILabel()
        prefix.font = percentCell.textField.font
        prefix.text = "%"
        prefix.sizeToFit()
        percentCell.textField.rightView = prefix
        percentCell.textField.rightViewMode = .whileEditing
        
        cellsArray.append([percentCell:117.0])
        
        let cell = table.dequeueReusableCell(withIdentifier: "BASAInfoCardCell") as! BASAInfoCardCell
        cell.lblText.text = "La suma total de tus beneficiarios debe dar un total del 100%"
        cellsArray.append([cell:110.0])
        
        let buttonCell = table.dequeueReusableCell(withIdentifier: "BASAButtonCell") as! BASAButtonCell
        buttonCell.btnNext.addTarget(self, action: #selector(validateFields), for: .touchUpInside)
        cellsArray.append([buttonCell:119.0])
    }
    
    func setTextFields(){
        tableFields.append(beneficiaryField(title: "Nombre", image: nil, placeHolder: nil, pickerData: nil, text: beneficiaryData?.nombre))
        tableFields.append(beneficiaryField(title: "Apellido paterno", image: nil, placeHolder: nil, pickerData: nil, text: beneficiaryData?.apellidoPaterno))
        tableFields.append(beneficiaryField(title: "Apellido materno", image: nil, placeHolder: "Opcional", pickerData: nil, text: beneficiaryData?.apellidoMaterno))
        if #available(iOS 13.0, *) {
            tableFields.append(beneficiaryField(title: "Fecha de nacimiento", image: UIImage(systemName: "calendar"), placeHolder: "DD/MM/AAAA", pickerData: pickerTextField.init(pickerOptions: nil, datePicker: true, dateFormat: "dd/mm/yyyy"), text: beneficiaryData?.fechaNacimiento))
            tableFields.append(beneficiaryField(title: "Parentesco", image: UIImage(systemName: "chevron.down"), placeHolder: "Selecciona", pickerData: pickerTextField.init(pickerOptions: ["Hermano/a","Hijo-a","Padre/Madre","Abuelo/a","Conyuge","Nieto/a","Tio/a","Sobrino/a","Otro","Padre","Madre","Tutor","Empleado"], datePicker: false, dateFormat: nil)))
        }
        tableFields.append(beneficiaryField(title: "Número telefónico", image: nil, placeHolder: nil, pickerData: nil, keyboardType: .numberPad, text: beneficiaryData?.contacto?.numeroTelefono))
        tableFields.append(beneficiaryField(title: "Correo electrónico", image: nil, placeHolder: nil, pickerData: nil, keyboardType: .emailAddress, text: beneficiaryData?.contacto?.correoElectronico))
    }
    
    func forgotDigitalSign(_ forgotSecurityCodeViewController: UIViewController?) {
        print("OK")
    }

    func verification(_ success: Bool, withSecurityCode securityCode: String?, andUsingBiometric usingBiometric: Bool) {
        
    }
    
    @objc func switchChanged(sender: UISwitch){
        if sender.isOn == true{
            let alert = UIAlertController(title: "Baz", message: "¿Quieres que tu beneficiario utilice tu dirección?", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "Aceptar", style: .default, handler: {_ in
                sender.isOn = true
            }))
            alert.addAction(UIAlertAction(title: "Cancelar", style: .cancel, handler: {_ in
                sender.isOn = false
            }))
            self.present(alert, animated: true, completion: nil)
        }else{
            if beneficiaryData?.domicilio != nil {
                let view = GSSANewBeneficiaryAddressRouter.createModuleWithParams(data: beneficiaryData!.domicilio!)
                self.present(view, animated: true, completion: nil)
            }else{
                let view = GSSANewBeneficiaryAddressRouter.createModule()
                self.present(view, animated: true, completion: nil)
            }
        }
    }
    
    @objc func updateData(sender: Notification){
        if sender.object != nil{
            let object = sender.object as! [String:Int]
            if object.first!.value != -1{
                tableFields[object.first!.value].text = object.first!.key
            }
        }
    }
    
    @objc func validateFields(){
        self.view.endEditing(true)
        
        var addressBody = BeneficiaryAddress.init(calle: beneficiaryPublicData.shared.calle, numeroExterior: beneficiaryPublicData.shared.numeroExterior, numeroInterior: beneficiaryPublicData.shared.numeroInterior, colonia: beneficiaryPublicData.shared.colonia, municipio: beneficiaryPublicData.shared.municipio, estado: beneficiaryPublicData.shared.estado, codigoPostal: beneficiaryPublicData.shared.codigoPostal)
        
        var contactBody = BeneficiaryContact.init(claveLada: "+52", numeroTelefono: beneficiaryPublicData.shared.numeroTelefono, numeroExtension: " ", correoElectronico: beneficiaryPublicData.shared.correoElectronico)
        
        if beneficiaryData?.domicilio != nil{
            addressBody = (beneficiaryData?.domicilio)!
        }
        
        if beneficiaryData?.contacto != nil{
            contactBody = (beneficiaryData?.contacto)!
        }
        
        let body = NewBeneficiaryBody.init(numeroCuenta: GSSISessionInfo.sharedInstance.gsUser.mainAccount?.encryptAlnova(), beneficiarios: [Beneficiario.init(id: beneficiaryPublicData.shared.id, nombre: beneficiaryPublicData.shared.nombre, apellidoPaterno: beneficiaryPublicData.shared.apellidoPaterno, apellidoMaterno: beneficiaryPublicData.shared.apellidoMaterno, fechaNacimiento: beneficiaryPublicData.shared.fechaNacimiento, idParentesco: beneficiaryPublicData.shared.idParentesco, porcentaje: beneficiaryPublicData.shared.porcentaje, domicilio: addressBody, contacto: contactBody)])
            
           print("body")
    }
    
    func showDigitalSign(){
        let verification = GSVTDigitalSignViewController(delegate: self)
        verification.needsTestSeed = true
        verification.modalPresentationStyle = .fullScreen
        present(verification, animated: true, completion: nil)
    }
    
    @IBAction func close(_ sender: Any){
        self.navigationController?.popViewController(animated: true)
    }
}

extension BASANewBeneficiaryViewController: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return cellsArray.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return cellsArray[indexPath.row].first?.key ?? UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return cellsArray[indexPath.row].first?.value ?? 100.0
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if table.cellForRow(at: indexPath)?.tag == 1{
            if beneficiaryData?.domicilio != nil {
                let view = GSSANewBeneficiaryAddressRouter.createModuleWithParams(data: beneficiaryData!.domicilio!)
                self.present(view, animated: true, completion: nil)
            }else{
                let view = GSSANewBeneficiaryAddressRouter.createModule()
                self.present(view, animated: true, completion: nil)
            }
        }
    }
}

extension BASANewBeneficiaryViewController: UITextFieldDelegate{
    func textFieldDidBeginEditing(_ textField: UITextField) {
        textField.placeholder = ""
        UIView.animate(withDuration: 0.3, animations: { () -> Void in
            self.view.frame.origin.y -= 100.0
        })
    }
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        UIView.animate(withDuration: 0.3, animations: { () -> Void in
            self.view.frame.origin.y = 0.0
        })
        beneficiaryPublicData.shared.porcentaje = textField.text
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        guard let textFieldText = textField.text,
              let rangeOfTextToReplace = Range(range, in: textFieldText) else {
            return false
        }
        let substringToReplace = textFieldText[rangeOfTextToReplace]
        let count = textFieldText.count - substringToReplace.count + string.count
        return count <= 3
    }
}

struct pickerTextField{
    var pickerOptions: [String]?
    var datePicker: Bool
    var dateFormat: String?
}

struct beneficiaryField{
    var title: String
    var image: UIImage?
    var placeHolder: String?
    var pickerData: pickerTextField?
    var size: cellSize?
    var keyboardType: UIKeyboardType?
    var text: String?
    var index: Int?
    var height: CGFloat?
    var tag: Int?
}

enum cellSize{
    case small
    case normal
}

public struct beneficiaryPublicData {
    static var shared = beneficiaryPublicData()
    var id: String?
    var nombre  : String?
    var apellidoPaterno: String?
    var apellidoMaterno: String?
    var fechaNacimiento: String?
    var idParentesco: String?
    var porcentaje: String?
    var domicilio: Bool?
    var calle: String?
    var numeroExterior: String?
    var numeroInterior: String?
    var colonia: String?
    var municipio: String?
    var estado: String?
    var codigoPostal: String?
    var contacto: Bool?
    var claveLada: String?
    var numeroTelefono: String?
    var numeroExtension: String?
    var correoElectronico: String?
    private init() { }
}

extension NewBeneficiaryBody {
    func hasEmptyFields()-> Bool {
        let mirror = Mirror(reflecting: self)
        return mirror.children.contains(where: { $0.value as! String? != "" &&  $0.value as! String? != nil})
    }
}
