//
//  BASACardLimitsViewController.swift
//  GSSAFront
//
//  Created Desarrollo on 14/06/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import GSSAVisualComponents

class BASACardLimitsViewController: UIViewController, BASACardLimitsViewProtocol, GSVCBottomAlertHandler{
    var bottomAlert: GSVCBottomAlert?
    var presenter: BASACardLimitsPresenterProtocol?
    
    @IBOutlet weak var table: UITableView!
    
    var cellSize = CGFloat(84.0)
    
    struct LimitItem{
        var title: String
        var subtitle: String
        var height: CGFloat
        var notificationID: String
        var textLenght: Int
    }
    
    var LimitItems: Array<LimitItem> = []
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setCells()
        registerCells()
        table.delegate = self
        table.dataSource = self
        table.alwaysBounceVertical = false
        NotificationCenter.default.addObserver(self, selector: #selector(handleFinishEditAction(notification:)), name: NSNotification.Name(rawValue: "BASALimitCellEditFinished"), object: nil)
        createTag(eventName: .pageView, section: "mi_dinero", flow: "dashboard", screenName: "limites_tarjeta", origin: "debito")
    }
    
    func setCells(){
        LimitItems.removeAll()
        let savedATMLimit = UserDefaults.standard.value(forKey: "debitCardATMLimit") as? String
        let savedDebitCardLimit = UserDefaults.standard.value(forKey: "debitCardAmountLimit") as? String
        
        LimitItems.append(LimitItem(title: "Retiro en cajero", subtitle: "Hasta \(savedATMLimit?.moneyFormatWithoutSplit() ?? "$7,500.00")", height: 84.0, notificationID: "debitCardATMLimit", textLenght: 4))
        
        LimitItems.append(LimitItem(title: "Límite de compra", subtitle: "Hasta \(savedDebitCardLimit?.moneyFormatWithoutSplit() ?? "$7,500.00")", height: 84.0, notificationID: "debitCardAmountLimit", textLenght: 9))
    }
    
    func registerCells(){
        table.register(UINib(nibName: "BASACardLimitCell", bundle: Bundle.init(for: BASACardLimitsViewController.self)), forCellReuseIdentifier: "BASACardLimitCell")
    }
    
    func optionalAction() {
        print("ok")
    }
    
    @objc func handleEditAction(sender: UIButton){
        table.beginUpdates()
        LimitItems[sender.tag].height = 130.0
        table.endUpdates()
    }
    
    @objc func handleFinishEditAction(notification: Notification){
        let text = notification.object as? [String:String]
        
        if notification.object != nil{
            if text?.first?.value.replacingOccurrences(of: " ", with: "").count ?? 0 < 1{
                self.presentBottomAlertFullData(status: .error, message: "Ingrese una cantidad para continuar", attributedString: nil, canBeClosed: true, animated: true, showOptionalButton: false, optionalButtonText: nil)
                setCells()
                self.table.reloadData()
            }else{
                let amountInt = Int(text?.first?.value ?? "0")!
                if amountInt.isMultiple(of: 50) && amountInt <= 7500 || text?.first?.key == "debitCardAmountLimit"{
                    GSVCLoader.show(type: .native)
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.5, execute: {  [self] in
                        var indicador = ""
                        if text?.first?.key == "debitCardAmountLimit"{
                            tagCardLimitButtonClick(element: "editar_limte_compra")
                            indicador = "01"
                        }else{
                            tagCardLimitButtonClick(element: "editar_retiro_cajero")
                            indicador = "02"
                        }
                        presenter?.requestCardLimitUpdate(ammount: text?.first?.value ?? "0", indicador: indicador, DataCard: {DataCard in
                            GSVCLoader.hide()
                            if DataCard != nil{
                                presentBottomAlertFullData(status: .success, message: "Límite actualizado", attributedString: nil, canBeClosed: true, animated: true, showOptionalButton: false, optionalButtonText: nil)
                                
                                UserDefaults.standard.setValue(text?.first?.value, forKey: text?.first?.key ?? "")
                            }else{
                                presentBottomAlertFullData(status: .error, message: "No podemos actualizar tu límite en este momento, por favor intenta más tarde", attributedString: nil, canBeClosed: true, animated: true, showOptionalButton: false, optionalButtonText: nil)
                                setCells()
                                self.table.reloadData()
                            }
                        })
                        table.beginUpdates()
                        for n in 0..<LimitItems.count{
                            LimitItems[n].height = 84.0
                        }
                        table.endUpdates()
                    })
                }else{
                    self.presentBottomAlertFullData(status: .error, message: "Solo multiplos de $50, hasta $7,500", attributedString: nil, canBeClosed: true, animated: true, showOptionalButton: false, optionalButtonText: nil)
                    setCells()
                    self.table.reloadData()
                }
            }
        }
    }
    
    @IBAction func close(_ sender: Any){
        self.navigationController?.popViewController(animated: true)
    }
    
}

extension BASACardLimitsViewController: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return LimitItems.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = table.dequeueReusableCell(withIdentifier: "BASACardLimitCell") as! BASACardLimitCell

        cell.btnEdit.tag = indexPath.row
        cell.notificationID = LimitItems[indexPath.row].notificationID
        cell.lblTitle.text = LimitItems[indexPath.row].title
        cell.lblSubtitle.text = LimitItems[indexPath.row].subtitle
        cell.textLenght = LimitItems[indexPath.row].textLenght
        cell.btnEdit.addTarget(self, action: #selector(handleEditAction(sender:)), for: .touchUpInside)
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return LimitItems[indexPath.row].height
    }
    
}
