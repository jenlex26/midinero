//
//  BASACardStatementsViewController.swift
//  GSSAFront
//
//  Created Desarrollo on 13/06/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import GSSAVisualComponents
import GSSAVisualTemplates

class BASACardStatementsViewController: UIViewController, BASACardStatementsViewProtocol, GSVTGenericResultDelegate {

	var presenter: BASACardStatementsPresenterProtocol?
    
    @IBOutlet weak var table: UITableView!
    
    struct statement{
        var title: String
        var subTitle: String?
        var switchState: Bool?
        var tag: Int?
    }
    
    var statements: Array<statement> = []

	override func viewDidLoad() {
        super.viewDidLoad()
        registerCells()
        setStatements()
        table.delegate = self
        table.dataSource = self
        table.alwaysBounceVertical = false
    }
    
    func setStatements(){
        statements.append(statement.init(title: "Seleccionar todos", subTitle: nil, tag: 1))
        statements.append(statement(title: "Mayo 2021", subTitle: "19 abril - 17 mayo"))
        statements.append(statement(title: "Abril 2021", subTitle: "19 marzo - 18 abril"))
        statements.append(statement(title: "Marzo 2021", subTitle: "17 febrero - 18 marzo"))
        statements.append(statement(title: "Febrero 2021", subTitle: "15 enero - 16 febrero"))
    }
    
    func registerCells(){
        let bundle = Bundle(for: BASACardStatementsViewController.self)
        table.register(UINib(nibName: "SectionCell", bundle: bundle), forCellReuseIdentifier: "SectionCell")
        table.register(UINib(nibName: "BASAInfoCardCell", bundle: bundle), forCellReuseIdentifier: "BASAInfoCardCell")
        table.register(UINib(nibName: "BASASwitchItemCell", bundle: bundle), forCellReuseIdentifier: "BASASwitchItemCell")
        table.register(UINib(nibName: "BASAButtonCell", bundle: bundle), forCellReuseIdentifier: "BASAButtonCell")
    }
    
    func genericResultStaticButtonAction(style: GSVTGenericResultStyle) {
        self.dismiss(animated: true, completion: {
            self.navigationController?.popViewController(animated: true)
        })
    }
    
    @objc func selectAllStatements(sender: UISwitch){
        for n in 0..<statements.count{
            if sender.isOn{
                statements[n].switchState = true
            }else{
                statements[n].switchState = false
            }
        }
        self.table.reloadData()
    }
    
    @objc func nextAction(sender: UIButton){
        GSVCLoader.show(type: .native)
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.5, execute: {
            GSVCLoader.hide()
            let genericResult = GSVTGenericResultViewController(genericResultDelegate: self, style: .success, title: "Estados de cuenta enviados", message: nil, attributedMessage: .none, folio: nil, optionalButtonTitle: nil, staticButtonTitle: nil)
            genericResult.modalPresentationStyle = .fullScreen
            self.present(genericResult, animated: true, completion: nil)
        })
    }
    
    @IBAction func close(_ sender: Any){
        self.navigationController?.popViewController(animated: true)
    }

}

extension BASACardStatementsViewController: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return statements.count + 4
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.row {
        case 0:
            let cell = table.dequeueReusableCell(withIdentifier: "SectionCell") as! SectionCell
            cell.lblTitle.text = "Selecciona los estados de cuenta"
            return cell
        case 1:
            let cell = table.dequeueReusableCell(withIdentifier: "SectionCell") as! SectionCell
            cell.lblTitle.text = "Se enviarán al correo electrónico lili22@gmail.com"
            cell.lblTitle.styleType = 6
            return cell
        case 2:
            let cell = table.dequeueReusableCell(withIdentifier: "BASAInfoCardCell")
            return cell!
        case statements.count + 3:
            let cell = table.dequeueReusableCell(withIdentifier: "BASAButtonCell") as! BASAButtonCell
            cell.btnNext.addTarget(self, action: #selector(nextAction(sender:)), for: .touchUpInside)
            return cell
        default:
            let cell = table.dequeueReusableCell(withIdentifier: "BASASwitchItemCell") as! BASASwitchItemCell
            let data = statements[indexPath.row - 3]
            if data.tag == 1{
                cell.swtch.addTarget(self, action: #selector(selectAllStatements(sender:)), for: .valueChanged)
            }
            if data.switchState == true{
                cell.swtch.isOn = true
            }else{
                cell.swtch.isOn = false
            }
            cell.configureCell(title: data.title, subtitle: data.subTitle)
            return cell
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.row {
        case 0:
            return 60.0
        case 1:
            return 70.0
        case 2:
            return 110.0
        case statements.count + 3:
            return 119.0
        default:
            return 70.0
        }
    }
}
