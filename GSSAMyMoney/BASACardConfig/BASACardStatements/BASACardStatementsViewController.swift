//
//  BASACardStatementsViewController.swift
//  GSSAFront
//
//  Created Desarrollo on 13/06/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import GSSAVisualComponents
import GSSAVisualTemplates

class BASACardStatementsViewController: UIViewController, BASACardStatementsViewProtocol, GSVTGenericResultDelegate, GSVCBottomAlertHandler {
    
    var bottomAlert: GSVCBottomAlert?
    var presenter: BASACardStatementsPresenterProtocol?
    
    @IBOutlet weak var table: UITableView!
    var type: CardType! 
    
    struct statement{
        var title: String
        var subTitle: String?
        var switchState: Bool?
        var tag: Int?
    }
    
    var statements: Array<statement> = []
    var requestData: [StatementDetail] = []
    
    override func viewDidLoad() {
        super.viewDidLoad()
        registerCells()
        table.delegate = self
        table.dataSource = self
        table.alwaysBounceVertical = false
        
        if type == .debit{
            GSVCLoader.show(type: .native)
            let requestBody = DebitCardStatementBody(numeroCuenta: "974563210", fechaInicio: "10-10-2020", fechaFin: "10-12-2020")
            presenter?.requestStatements(body: requestBody, StatementsResultData: { [self] StatementsResultData in
                GSVCLoader.hide()
                if StatementsResultData != nil{
                    requestData = StatementsResultData?.resultado?.detalles ?? []
                    setStatements()
                }else{
                    self.presentBottomAlertFullData(status: .error, message: "Ocurrió un error desconocido, intenta más tarde", attributedString: nil, canBeClosed: true, animated: true, showOptionalButton: true, optionalButtonText:nil)
                }
            })
        }
        
        if type == .credit{
            print("NOS IMPLEMENTED...")
        }
        
    }
    
    func setStatements(){
        statements.append(statement.init(title: "Seleccionar todos", subTitle: nil, tag: 0))
        var index = 1
        for item in requestData{
            let title = item.fechaFin?.dateFormatter(format: "dd-MM-yyyy", outputFormat: "MMMM yyyy")
            let initialDate = item.fechaInicio?.dateFormatter(format: "dd-MM-yyyy", outputFormat: "dd MMMM") ?? ""
            let finalDate = item.fechaFin?.dateFormatter(format: "dd-MM-yyyy", outputFormat: "dd MMMM") ?? ""
            statements.append(statement(title: title ?? "", subTitle: initialDate + " - " + finalDate, tag: index))
            index += 1
        }
        
        table.reloadData()
    }
    
    func registerCells(){
        let bundle = Bundle(for: BASACardStatementsViewController.self)
        table.register(UINib(nibName: "SectionCell", bundle: bundle), forCellReuseIdentifier: "SectionCell")
        table.register(UINib(nibName: "BASAInfoCardCell", bundle: bundle), forCellReuseIdentifier: "BASAInfoCardCell")
        table.register(UINib(nibName: "BASASwitchItemCell", bundle: bundle), forCellReuseIdentifier: "BASASwitchItemCell")
        table.register(UINib(nibName: "BASAButtonCell", bundle: bundle), forCellReuseIdentifier: "BASAButtonCell")
    }
    
    func genericResultStaticButtonAction(style: GSVTGenericResultStyle) {
        self.dismiss(animated: true, completion: {
            self.navigationController?.popViewController(animated: true)
        })
    }
    
    func optionalAction() {
        print("OK")
    }
    
    @objc func selectAllStatements(sender: UISwitch){
        for n in 0..<statements.count{
            if sender.isOn{
                statements[n].switchState = true
            }else{
                statements[n].switchState = false
            }
        }
        self.table.reloadData()
    }
    
    @objc func stamementSelected(sender: UISwitch){
        statements[0].switchState = false
        statements[sender.tag].switchState = sender.isOn
    }
    
    @objc func nextAction(sender: UIButton){
        GSVCLoader.show(type: .native)
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.5, execute: {
            GSVCLoader.hide()
            let genericResult = GSVTGenericResultViewController(genericResultDelegate: self, style: .success, title: "Estados de cuenta enviados", message: nil, attributedMessage: .none, folio: nil, optionalButtonTitle: nil, staticButtonTitle: nil)
            genericResult.modalPresentationStyle = .fullScreen
            self.present(genericResult, animated: true, completion: nil)
        })
    }
    
    @IBAction func close(_ sender: Any){
        self.navigationController?.popViewController(animated: true)
    }
    
}

extension BASACardStatementsViewController: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return statements.count + 4
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.row {
        case 0:
            let cell = table.dequeueReusableCell(withIdentifier: "SectionCell") as! SectionCell
            cell.lblTitle.text = "Selecciona los estados de cuenta"
            return cell
        case 1:
            let cell = table.dequeueReusableCell(withIdentifier: "SectionCell") as! SectionCell
            cell.lblTitle.text = "Se enviarán al correo electrónico lili22@gmail.com"
            cell.lblTitle.styleType = 6
            return cell
        case 2:
            let cell = table.dequeueReusableCell(withIdentifier: "BASAInfoCardCell")
            return cell!
        case statements.count + 3:
            let cell = table.dequeueReusableCell(withIdentifier: "BASAButtonCell") as! BASAButtonCell
            cell.btnNext.addTarget(self, action: #selector(nextAction(sender:)), for: .touchUpInside)
            return cell
        default:
            let cell = table.dequeueReusableCell(withIdentifier: "BASASwitchItemCell") as! BASASwitchItemCell
            let data = statements[indexPath.row - 3]
            if data.tag == 0{
                cell.swtch.addTarget(self, action: #selector(selectAllStatements(sender:)), for: .valueChanged)
            }else{
                cell.swtch.addTarget(self, action: #selector(stamementSelected(sender:)), for: .valueChanged)
            }
            if data.switchState == true{
                cell.swtch.isOn = true
            }else{
                cell.swtch.isOn = false
            }
            cell.configureCell(title: data.title, subtitle: data.subTitle)
            return cell
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.row {
        case 0:
            return 65.0
        case 1:
            return 70.0
        case 2:
            return 110.0
        case statements.count + 3:
            return 119.0
        default:
            return 70.0
        }
    }
}

extension String{
    func dateFormatter(format: String, outputFormat: String) -> String{
        let dateFormatterIn = DateFormatter()
        dateFormatterIn.dateFormat = format
        
        let dateFormatterOut = DateFormatter()
        dateFormatterOut.dateFormat = outputFormat
        dateFormatterOut.locale = Locale(identifier: "es_MX")
        
        let dateIn = dateFormatterIn.date(from: self)
        let dateOut = dateFormatterOut.string(from: dateIn ?? Date())
        
        return dateOut.capitalized
    }
}
