//
//  GSSAMovementPreviewViewController.swift
//  GSSAMyMoney
//
//  Created Desarrollo on 13/07/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import GSSAVisualComponents

class GSSAMovementPreviewViewController: UIViewController, GSSAMovementPreviewViewProtocol {
    
    var presenter: GSSAMovementPreviewPresenterProtocol?
    
    @IBOutlet weak var tableContainer: UIView!
    @IBOutlet weak var lblTitle      : GSVCLabel!
    @IBOutlet weak var lblAmount     : GSVCLabel!
    @IBOutlet weak var lblDate       : GSVCLabel!
    @IBOutlet weak var btnArrow      : UIButton!
    @IBOutlet weak var table         : UITableView!
    
    var cellsArray:  Array<[UITableViewCell:CGFloat]> = []
    var details: [String:String] = [:]
    var data: DebitCardTransactionItemV2!
    var movementsArray: DebitCardTransactionV2!
    var index: Int!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.clear
        btnArrow.makeCircular()
        tableContainer.roundCorners(corners: [.topLeft, .topRight], radius: 20.0)
        table.delegate = self
        table.dataSource = self
        registerCells()
        print("INDEX RECIBIDO \(index)")
        readData(transaction: data)
    }
    
    func registerCells(){
        let bundle = Bundle(for: GSSAMovementPreviewViewController.self)
        table.register(UINib(nibName: "BASAMovementTableViewCell", bundle: bundle), forCellReuseIdentifier: "BASAMovementCell")
        table.register(UINib(nibName: "BASAInfoCardCell", bundle: bundle), forCellReuseIdentifier: "BASAInfoCardCell")
        table.register(UINib(nibName: "SectionCell", bundle: bundle), forCellReuseIdentifier: "SectionCell")
    }
    
    func setOptions(SPEI: Bool){
        for element in details{
            let cell = table.dequeueReusableCell(withIdentifier: "BASAMovementCell") as! BASAMovementTableViewCell
            cell.imgView.isHidden = true
            cell.lblAmount.isHidden = true
            cell.lblTitle.text = element.value
            cell.lblTitle.styleType = 8
            cell.lblDate.text = element.key
            cell.lblDate.numberOfLines = 2
            cell.lblDate.styleType = 6
            if element.key.removeWhiteSpaces() != ""{
                if element.value == "Para"{
                    cellsArray.append([cell:85.0])
                }else{
                    cellsArray.append([cell:75.0])
                }
            }
        }
        
        
        cellsArray = cellsArray.sorted(by: { ($0.first?.key as! BASAMovementTableViewCell).lblTitle.text!  < ($1.first?.key as! BASAMovementTableViewCell).lblTitle.text! })
        
        if SPEI == true{
            
            let sectionCell =  table.dequeueReusableCell(withIdentifier: "SectionCell")!
            sectionCell.isHidden = true
            cellsArray.append([sectionCell:30.0])
            
            let cardInfo = table.dequeueReusableCell(withIdentifier: "BASAInfoCardCell") as! BASAInfoCardCell
            cardInfo.lblText.text = "Consulta el estatus en: \nhttps://www.banxico.org.mx/cep/"
            cardInfo.tag = 1
            cellsArray.append([cardInfo:81.0])
            
            
            let secondCard = table.dequeueReusableCell(withIdentifier: "BASAInfoCardCell") as! BASAInfoCardCell
            secondCard.lblText.text = "Este vínculo se activará a más tardar dentro de los primeros 5 minutos siguientes de la aceptación de la operación."
            cellsArray.append([secondCard:121.0])
            
        }
        self.table.reloadData()
    }
    
    func readData(transaction: DebitCardTransactionItemV2){
        cellsArray.removeAll()
        details.removeAll()
        
        lblAmount.text = transaction.importe?.moneyFormat()
        lblDate.text = transaction.fecha?.dateFormatter(format: "yyyy-MM-dd", outputFormat: "dd MMM yyyy")
        if transaction.descripcion?.isNumeric == true{
            lblTitle.text = transaction.concepto
        }else{
            lblTitle.text = transaction.descripcion
        }
        
        details.updateValue("Realizado", forKey: transaction.nombreOrdenante ?? "")
        details.updateValue("Para", forKey:  transaction.descripcionBeneficiario ?? "")
        details.updateValue("Concepto", forKey: transaction.descripcion ?? "")
       // details.updateValue("Id de operación", forKey: transaction.idOperacion ?? "")
        details.updateValue("Folio", forKey: transaction.folio ?? "")
        details.updateValue("Número de operación", forKey: transaction.numeroOperacion ?? "")
        // details.updateValue("Clave de rastreo", forKey: "123456678909876I")
        // details.updateValue("Estatus de transferencia", forKey: "Liquidada")
        details.updateValue("Fecha y hora de registro", forKey: (transaction.fecha?.dateFormatter(format: "yyyy-MM-dd", outputFormat: "dd MMM yyyy") ?? "") + " " + (data.hora?.timeFormatter() ?? ""))
        
        if (transaction.descripcionBeneficiario ?? "") != ""{
            setOptions(SPEI: true)
        }else{
            setOptions(SPEI: false)
        }
    }
    
    func share(_ shouldSave: Bool = false) -> UIImage? {
        let tableImage = table.renderTable()
        var screenshotImage :UIImage?
        let layer = UIApplication.shared.keyWindow!.layer
        let scale = UIScreen.main.scale
        UIGraphicsBeginImageContextWithOptions(layer.frame.size, false, scale);
        guard let context = UIGraphicsGetCurrentContext() else {return nil}
        layer.render(in:context)
        screenshotImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        if let image = screenshotImage, shouldSave {
            UIImageWriteToSavedPhotosAlbum(image, tableImage, nil, nil)
        }
        return screenshotImage
    }
    
    @IBAction func close(_ sender: Any){
        self.navigationController?.popViewController(animated: true)
    }
    
    @IBAction func share(_ sender: Any){
        let image = share()
        let imageToShare = [ image! ]
        let activityViewController = UIActivityViewController(activityItems: imageToShare, applicationActivities: nil)
        activityViewController.popoverPresentationController?.sourceView = self.view
        self.present(activityViewController, animated: true, completion: nil)
    }
    
    @IBAction func nextMovement(_ sender: Any){
        index += 1
        let array = movementsArray.resultado?.movimientos
        if index < array?.count ?? 0{
            readData(transaction: (array?[index])!)
        }
    }
}

extension GSSAMovementPreviewViewController: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return cellsArray.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return cellsArray[indexPath.row].first?.key ?? UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return cellsArray[indexPath.row].first?.value ?? 100.0
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let cell = table.cellForRow(at: indexPath)
        switch cell?.tag{
        case 1:
            if let url = URL(string: "https://www.banxico.org.mx/cep/") {
                UIApplication.shared.open(url)
            }
        case .none:
            print("None case")
        case .some(_):
            print("Some")
        }
    }
}
